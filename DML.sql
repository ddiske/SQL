-- INSERT
-- INSERT INTO 테이블명 (컬럼명, 컬럼명, ...) VALUES (값, 값, ...)
SELECT * FROM REGIONS;

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES (5, 'OSEANEA');

INSERT INTO REGIONS (REGION_ID, REGION_NAME)
VALUES (6, NULL);

INSERT INTO REGIONS (REGION_ID)
VALUES (7);

-- 컬럼명의 순서는 테이블의 컬럼들과 동일하게
-- 따라서 값의 순서는 테이블의 컬럼들 순서와 일치
INSERT INTO REGIONS
VALUES (8, 'North');
-- 컬럼명을 나열하지 않을때는 컬럼의 갯수만큼 값도 입력
INSERT INTO REGIONS
VALUES (
	(SELECT MAX(REGION_ID)+1 FROM REGIONS)
, 'South');

SELECT * FROM LOCATIONS;
SELECT * FROM COUNTRIES;


INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME, REGION_ID)
VALUES ('AN', 'ANIHC', 3);

INSERT INTO COUNTRIES
VALUES ('NP', 'Napaj', 3);


SELECT * FROM SEQ;


SELECT * FROM DEPARTMENTS;

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
VALUES (DEPARTMENTS_SEQ.NEXTVAL, 'Test', 100, 1700);

INSERT INTO DEPARTMENTS (DEPARTMENT_ID, DEPARTMENT_NAME, MANAGER_ID, LOCATION_ID)
VALUES (DEPARTMENTS_SEQ.NEXTVAL, 'Test2', 100, 1700);

SELECT * FROM EMPLOYEES;
SELECT * FROM JOBS;
SELECT * FROM DEPARTMENTS;

INSERT INTO EMPLOYEES(EMPLOYEE_ID, FIRST_NAME, LAST_NAME, EMAIL, PHONE_NUMBER, HIRE_DATE, JOB_ID, SALARY, COMMISSION_PCT, MANAGER_ID, DEPARTMENT_ID)
VALUES (EMPLOYEES_SEQ.NEXTVAL, 'asdf', 'qwer', 'zxcv', '123.456.789', SYSDATE, 'SA_REP', 3000, 0, 145, 80);

SELECT * FROM EMPLOYEES
WHERE LAST_NAME = 'Lee';

INSERT INTO EMPLOYEES
VALUES (EMPLOYEES_SEQ.NEXTVAL, '0', '1', '01', '010', '2025-01-20', 'SA_REP', 1010, 0.1, 147, 80);

-- 접속 후 INSERT, UPDATE, DELETE
-- COMMIT(저장)
-- ROLLBACK(취소, 이전 COMMIT 지점까지)
COMMIT;


----------------------------------------------------------------



SELECT * FROM REGIONS;
UPDATE REGIONS SET REGION_NAME = 'EARTH';
UPDATE REGIONS SET REGION_NAME = 'Asia'
WHERE REGION_ID = 1;
ROLLBACK;

SELECT * FROM DEPARTMENTS;
UPDATE DEPARTMENTS SET MANAGER_ID = 200
WHERE MANAGER_ID IS NULL;

-- 월급 인상, 모든 사원의 월급을 일괄적으로 10% 인상
SELECT * FROM EMPLOYEES;

UPDATE EMPLOYEES SET SALARY = SALARY*1.1;



-----------------------------------------------------------------


DELETE COUNTRIES WHERE COUNTRY_ID = 'IT';

SELECT * FROM DEPARTMENTS;

SELECT * FROM COUNTRIES;


------------------------------------------------------------------
-- Table 생성
CREATE TABLE Study(
	NUM NUMBER PRIMARY KEY,
	NAME VARCHAR2(50) NOT NULL, -- BYTE
	BIRTH DATE DEFAULT '2000-01-01',
	AGE NUMBER(3) CHECK (AGE > 0 AND AGE <= 150) -- AGE 1 BETWEEN 150
);

SELECT * FROM TAB;
SELECT * FROM STUDY;

DROP TABLE STUDY;

INSERT INTO STUDY
VALUES (1, '김철수', '1988-08-08', 38);

INSERT INTO STUDY
VALUES (2, '이영희', '1989-12-25', 37);

INSERT INTO STUDY
VALUES (3, '이영희', NULL, 37);

INSERT INTO STUDY(NUM, NAME, AGE)
VALUES (4, '김철수', 38);

INSERT INTO STUDY(NUM, NAME, AGE)
VALUES (5, '김철수', 200);

SELECT* FROM COUNTRIES;
SELECT * FROM LOCATIONS;

DELETE STUDY WHERE NUM = 1;


--------------------------------------------------------------------

SELECT * FROM USER_CONSTRAINTS;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'TEACHERS';

DROP TABLE TEACHERS;
-- 1. Column label 방식
-- 컬럼명 타입 CONSTRAINTS 제약조건별칭 제약조건이름
-- 제약조건별칭 테이블명_컬럼명_제약조건약칭
--CREATE TABLE Teachers(
--	num NUMBER CONSTRAINT TEACHERS_NUM_PK PRIMARY KEY,
--	name varchar2(200) NOT NULL, -- 제약조건이름을 줄 수 없음
--	EMAIL VARCHAR2(200) CONSTRAINT TEACHERS_EMAIL_U UNIQUE
--);

-- 2. Table label 방식
CREATE TABLE Teachers(
	num NUMBER, --CONSTRAINT TEACHERS_NUM_PK PRIMARY KEY,
	name varchar2(200) NOT NULL, -- 제약조건이름을 줄 수 없음, COLUMN label 방식만 가능
	EMAIL VARCHAR2(200),--CONSTRAINT TEACHERS_EMAIL_U UNIQUE
	CONSTRAINT TEACHERS_NUM_PK PRIMARY KEY(num),
	CONSTRAINT TEACHERS_EMAIL_U UNIQUE(email)
);

DROP TABLE STUDENTS PURGE;
--CREATE TABLE STUDENTS(
--	HAKBUN NUMBER CONSTRAINT ST_HB_PK PRIMARY KEY,
--	STUdentname varchar2(200),
--	AGE NUMBER,
--	num NUMBER CONSTRAINT ST_NUM_FK REFERENCES teachers (num)
--)
CREATE TABLE STUDENTS(
	HAKBUN NUMBER,
	STUdentname varchar2(200),
	AGE NUMBER,
	num NUMBER,
	CONSTRAINT ST_HB_PK PRIMARY KEY(hakbun),
	-- CONSTRAINT ST_num_fk FOREIGN KEY (num) REFERENCES teachers (num) ON DELETE CASCADE
	CONSTRAINT ST_num_fk FOREIGN KEY (num) REFERENCES teachers (num) ON DELETE SET NULL
);

DELETE TEACHERS WHERE NUM = 1;

-- 학번, 이름, 나이
SELECT * FROM TEACHERS;
SELECT * FROM STUDENTS;

INSERT INTO TEACHERS
VALUES (1, 'IU', 'iu@naver.com');

INSERT INTO STUDENTS
VALUES (1001, 'winter', 20, 1);

INSERT INTO STUDENTS
VALUES (1002, 'suji', 21, 1);


-- 이름이 IU 선생님이 가르치는 학생들의 모든 정보 출력
SELECT * FROM STUDENTS
WHERE NUM = (
	SELECT NUM FROM TEACHERS
	WHERE NAME = 'IU'
);


-- 사번이 1번인 선생님의 정보와 그 선생님이 가르치는 모든 학생들의 정보 출력
SELECT * FROM STUDENTS S
JOIN TEACHERS T
ON S.NUM = T.NUM
WHERE T.NUM = 1;

SELECT * FROM STUDENTS
JOIN TEACHERS
USING(NUM)
WHERE NUM = 1;

SELECT * FROM STUDENTS
NATURAL JOIN TEACHERS
WHERE NUM = 1;


-- SUBQUERY를 이용해서 Table 생성 (join도 가능)
-- 컬럼명 데이터타입, 값이 복사, 제약조건은 Not Null만 복사
CREATE TABLE EMP
AS SELECT EMPLOYEE_ID AS EMP_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
WHERE SALARY >= 8000;

SELECT * FROM TAB;
SELECT * FROM EMP;


SELECT * FROM RECYCLEBIN;
PURGE RECYCLEBIN;

FLASHBACK TABLE STUDENTS TO BEFORE DROP;


-------------------------------------------------------------
-- 객체 수정 ALTER

-- 1. 테이블 이름 수정 RENAME
SELECT * FROM TAB;
RENAME STUDY TO STUDENTS;


-- 2. 컬럼명 수정
SELECT * FROM STUDENTS;
ALTER TABLE STUDENTS RENAME COLUMN NUM TO STUDENT_NUM;


-- 3. 컬럼 타입 수정
SELECT * FROM TEACHERS;
ALTER TABLE TEACHERS MODIFY (EMAIL NUMBER(3));


-- 4. 컬럼 추가
SELECT * FROM STUDENTS;
ALTER TABLE STUDENTS ADD (EMAIL VARCHAR2(200));


-- 5. 컬럼 삭제
SELECT * FROM STUDENTS;
ALTER TABLE STUDENTS DROP COLUMN AGE;


-- 6. 제약 조건 수정
-- 수정 불가
SELECT * FROM TEACHERS;
SELECT * FROM USER_CONSTRAINTS WHERE TABLE_NAME = 'TEACHERS';
-- 	1) 제약조건 삭제
ALTER TABLE TEACHERS DROP CONSTRAINT TEACHERS_NUM_PK
ALTER TABLE TEACHERS DROP CONSTRAINT ;
-- 	2) 제약조건 추가
ALTER TABLE TEACHERS ADD CONSTRAINT TEACHERS_NUM_U UNIQUE (NUM);


----------------------------------------------------------------------
SELECT * FROM SEQ;


CREATE SEQUENCE TEST_SEQ
INCREMENT BY 10
START WITH 10
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE SEQUENCE TEST2_SEQ;


SELECT TEST2_SEQ.NEXTVAL FROM DUAL;
SELECT TEST2_SEQ.CURRVAL FROM DUAL;

DROP SEQUENCE TEST_SEQ;



-- 상품 리스트
CREATE OR REPLACE VIEW V_EMP
AS 
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY SALARY DESC;

SELECT * FROM V_EMP;

CREATE OR REPLACE VIEW V_EMP(사원번호, 이름, 월급)
AS 
SELECT EMPLOYEE_ID, FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY SALARY DESC;

INSERT INTO V_EMP
VALUES(EMPLOYEES_SEQ.NEXTVAL, Test, 1592)

ALTER TABLE EMPLOYEES ADD (PASSWORD VARCHAR2(100));
SELECT * FROM EMPLOYEES;

UPDATE EMPLOYEES SET PASSWORD = '1234';


SELECT FIRST_NAME, PASSWORD, EMPLOYEE_ID FROM EMPLOYEES
WHERE EMPLOYEE_ID = 100 AND PASSWORD = 'asdasfasd';