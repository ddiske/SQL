-- 조회 Read
-- SQL
SELECT *
FROM COUNTRIES;

SELECT *
FROM DEPARTMENTS;

SELECT *
FROM EMPLOYEES;

SELECT *
FROM JOBS;

SELECT *
FROM JOB_HISTORY;

SELECT *
FROM LOCATIONS;

SELECT *
FROM REGIONS;

SELECT FIRST_NAME, LAST_NAME FROM EMPLOYEES;

SELECT DISTINCT DEPARTMENT_ID FROM EMPLOYEES;

SELECT DISTINCT SALARY FROM EMPLOYEES;

SELECT DISTINCT SALARY, DEPARTMENT_ID FROM EMPLOYEES;

-- 사원의 이름과 급여를 조회
SELECT FIRST_NAME, LAST_NAME, SALARY, SALARY*12
FROM EMPLOYEES;


SELECT LAST_NAME "이름",
	   SALARY "월급", 
	   SALARY*NVL(COMMISSION_PCT, 0) "인센티브", 
	   (SALARY*NVL(COMMISSION_PCT, 0)) + SALARY AS "TOTAL"
FROM EMPLOYEES;

--8000초과 10000미만
SELECT * FROM EMPLOYEES WHERE SALARY > 8000 AND SALARY < 10000;

-- 부서번호가 100 또는 80 부서인 사원
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 100 OR DEPARTMENT_ID = 80

SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NULL;
SELECT * FROM EMPLOYEES WHERE COMMISSION_PCT IS NOT NULL;

SELECT * FROM EMPLOYEES WHERE MANAGER_ID IS NULL;

SELECT * FROM TAB;

--테이블의 구조 확인
--DESC DEPARTMENTS;

-- SELECT *, 컬럼, 계산식, 함수호출, 별칭(Alias), Distinct
-- FROM 테이블명
-- WHERE 조건식 (비교연산자, AND, OR, IS(NOT)NULL)

SELECT *
FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME = 'Bruce';

SELECT * 
FROM EMPLOYEES
WHERE HIRE_DATE >='2005-01-01';

SELECT *
FROM EMPLOYEES
WHERE SALARY >= 8000 AND SALARY <= 10000;

SELECT *
FROM EMPLOYEES
WHERE SALARY BETWEEN 8000 AND 10000; -- BETWEEN 작은수 AND 큰수

SELECT * 
FROM EMPLOYEES
WHERE DEPARTMENT_ID = 110 OR DEPARTMENT_ID = 90;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID IN (110, 90);

SELECT *
FROM EMPLOYEES
WHERE SALARY NOT BETWEEN 8000 AND 10000;

SELECT *
FROM EMPLOYEES
WHERE DEPARTMENT_ID NOT IN (90, 110);

-- FIRST NAME에서 a문자가 포함된 사원의 정보
SELECT *
FROM EMPLOYEES
WHERE FIRST_NAME NOT LIKE '%a%';

SELECT *
FROM EMPLOYEES
ORDER BY SALARY DESC;

SELECT *
FROM EMPLOYEES
ORDER BY SALARY ASC;

SELECT *
FROM EMPLOYEES
ORDER BY HIRE_DATE ASC, SALARY DESC;

SELECT FIRST_NAME, SALARY
FROM EMPLOYEES
ORDER BY 1 ASC;

SELECT *
FROM DEPARTMENTS
WHERE DEPARTMENT_ID = 100;

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID = 90;

SELECT *
FROM LOCATIONS
WHERE LOCATION_ID = 1000;

SELECT * FROM LOCATIONS WHERE LOCATION_ID = 1000;

SELECT * FROM COUNTRIES ORDER BY COUNTRY_NAME ASC;

SELECT * FROM COUNTRIES WHERE REGION_ID = 3;

SELECT * FROM DEPARTMENTS WHERE DEPARTMENT_ID = 10;

SELECT * FROM REGIONS ORDER BY REGION_ID ASC;

SELECT EMPLOYEE_ID, LAST_NAME, JOB_ID FROM EMPLOYEES;

SELECT *
FROM EMPLOYEES
WHERE LAST_NAME
LIKE 'K%';

----------------------------------------------------------------
-----------------------함수(Function)-----------------------------
-- 그룹 함수 : 결과가 1개의 값
-- max
-- min
-- sum
-- avg
-- count
SELECT * FROM EMPLOYEES;
SELECT COUNT(EMPLOYEE_ID) FROM EMPLOYEES;
SELECT COUNT(COMMISSION_PCT) FROM EMPLOYEES;
SELECT MAX(SALARY) FROM EMPLOYEES;
SELECT AVG(SALARY) FROM EMPLOYEES;
SELECT SUM(SALARY) FROM EMPLOYEES;
SELECT AVG(SALARY), SUM(SALARY)/COUNT(SALARY) FROM EMPLOYEES;

-- 부서번호가 10번인 부서의 월급의 합계, 평균, 부서원수 출력
SELECT SUM(SALARY), AVG(SALARY), COUNT(EMPLOYEE_ID) FROM EMPLOYEES WHERE DEPARTMENT_ID = 30;

-- 부서별로
SELECT DEPARTMENT_ID, AVG(SALARY), COUNT(EMPLOYEE_ID)
FROM EMPLOYEES
GROUP BY DEPARTMENT_ID
HAVING AVG(SALARY) > 10000;



SELECT 1+1 FROM DUAL;

-- 단일행 함수 : 결과가 각각 row에 해당 되서 row의 갯수와 같음

-- Query 내에 또 다른 Query -> SubQuery

----
-- First_name 이 Lex 라는 사원이 근무하는 부서의 도시명?
SELECT * FROM EMPLOYEES WHERE FIRST_NAME = 'Lex';
SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID = 90;
SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID = 1700;
-- UNIQUE : 중복데이터 불가
-- NOT NULL : NULL 데이터 입력 불가
-- PRIMARY KEY : UNIQUE + NOT NULL
SELECT REGION_ID FROM COUNTRIES WHERE COUNTRY_ID = 'US';
SELECT REGION_NAME FROM REGIONS WHERE REGION_ID = 2;


-- FIRST_NAME TJ
-- 1. 부서의 관리자 의 모든 정보
-- 2. 부서의 관리자 보다 더 늦게 입사한 사람들의 평균 급여
SELECT MANAGER_ID FROM EMPLOYEES WHERE FIRST_NAME = 'TJ';
SELECT HIRE_DATE FROM EMPLOYEES WHERE EMPLOYEE_ID = 121;--1
SELECT AVG(SALARY) FROM EMPLOYEES WHERE HIRE_DATE > '2005-04-10';--2


-- 가 속한 나라명??
SELECT COUNTRY_NAME FROM COUNTRIES WHERE COUNTRY_ID =
(SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID =
(SELECT LOCATION_ID FROM DEPARTMENTS WHERE DEPARTMENT_ID =
SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE ));